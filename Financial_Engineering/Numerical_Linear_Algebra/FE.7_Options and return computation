####################################################################
#  Yuxiao Luo                           yuxiaoluo@hotmail.com
#  Options and return computation
#  Data: financials2012
####################################################################

Y_2 <- c(4.69, 4.81, 4.81, 4.79, 4.79, 4.83, 4.81, 4.81, 4.83,4.81, 4.82, 4.82, 4.80, 4.78, 4.79)
Y_3 <- c(4.58, 4.71, 4.72, 4.78, 4.77, 4.75, 4.71, 4.72, 4.76, 4.73, 4.75, 4.75, 4.73, 4.71, 4.71)
Y_5 <- c(4.57, 4.69, 4.70, 4.77, 4.77, 4.73, 4.72, 4.74, 4.77, 4.75, 4.77, 4.76, 4.75, 4.72, 4.71)
Y_10 <- c(4.63, 4.73, 4.74, 4.81, 4.80, 4.79, 4.76, 4.77, 4.80, 4.77, 4.80, 4.80, 4.78, 4.73, 4.73)
bonds <- data.frame("2" = Y_2, "3" = Y_3, "5" = Y_5, "10" = Y_10)

############### (i)
y <- matrix(Y_3, nrow = length(Y_3), ncol =1 )
A <- as.matrix(cbind(data.frame("1" = rep(1,times = 15)),bonds[,-2]))

solve(t(A)%*%A, t(A)%*%y)

T3_LR <- function(Y_2, Y_5, Y_10){
  
  n <- length(Y_2)
  result <- rep(NA, times = n)
  for(i in 1:n){
    
    result[i] <- 0.01230208 + Y_2[i]*0.12720817 + Y_5[i]*0.33404530 + Y_10[i]*0.52977688
    
  }
  return(result)
}

er_LR <- Y_3 - T3_LR(Y_2, Y_5, Y_10)
sqrt(sum(er_LR^2)) # calculate sum of square and then root it

rm(y,A,er_LR, T3_LR)

############### (ii)
#T_2
#y <- matrix(Y_2, nrow = length(Y_2), ncol =1 )
#A <- as.matrix(cbind(data.frame("1" = rep(1,times = 15)),bonds[,-1]))
#solve(t(A)%*%A, t(A)%*%y)
#rm(y,A)

#T_5
#y <- matrix(Y_5, nrow = length(Y_5), ncol =1 )
#A <- as.matrix(cbind(data.frame("1" = rep(1,times = 15)),bonds[,-3]))
#solve(t(A)%*%A, t(A)%*%y)
#rm(y,A)

T3_lin <- function(T_2, T_5){
  
  n <- length(T_2)
  result <- rep(NA, times = n)
  for(i in 1:n){
    
    result[i] <- T_2[i]*2/3 + T_5[i]*1/3
    
  }
  return(result)
}

er_li <- Y_3 - T3_lin(Y_2, Y_5)
sqrt(sum(er_li^2))

rm(er_li, T3_lin)
                      
#############(iii)

######################################################### options

option <- c(1175, 1200, 1225, 1250, 1275, 1300, 1325, 1350, 1375, 1400, 1425, 1450, 1500, 1550, 1575, 1600)
A <- data.frame("A1" = rep(1, times = 16), "A2" = -option)
y <- matrix(c(178.8, 154, 129.05, 104.20, 79, 54, 29.05, 4.25, -20.4, -45.45, -70.3, -95.95, -144.7, -195, -219.80, -244.50), 
            nrow = 16, ncol =1)
A <- as.matrix(A)
solve(t(A)%*%A,t(A)%*%y)

######################################################### return computation

require(xlsx) # for reading xlsx file

x <- read.xlsx("financials2012.xlsx", 1)
x <- x[is.na(x$Date) == F,]
# change the order of x
x <- x[nrow(x):1,]
rownames(x) <- 1:nrow(x)
head(x)
tail(x)

p.return <- function(vector){ # function for computing percentage return 
  
  index <- 0 
  p.r.vector <- rep(NA, times = nrow(x)) # set the vector for percentage return
  
  for( i in 2:nrow(x)){ # for loop
    
    p.r.vector[i] <- (vector[i] - vector[i-1])/vector[i-1]
    
    index <- index + 1 # index add one at each iteration         
    
  } 
  p.r.vector <- p.r.vector[-1]
  return(p.r.vector) # output result
}

JPM <- p.return(x$JPM)
GS <- p.return(x$GS)
MS <- p.return(x$MS)
BAC <- p.return(x$BAC)
RBS <- p.return(x$RBS)
CS <- p.return(x$CS)
UBS <- p.return(x$UBS)
RY.RBC <- p.return(x$RY..RBC.)
BCS.BAR <- p.return(x$BCS..Barclays.)

wp <- data.frame("JPM" = JPM, "GS" = GS, "MS" = MS, "BAC" = BAC, "RBS" = RBS, "CS" = CS, "UBS" = UBS, "RY.RBC" = RY.RBC,
                 "BCS.BAR" = BCS.BAR)
wp
# write.xlsx(wp, "c:/Users/Yuxiao Luo/Documents/weekly return.xlsx")
