####################################################################
#  Yuxiao Luo                           yuxiaoluo@hotmail.com
#  Payoff vector, put option and mid point price
####################################################################

#compute the payoff vector

w <- c(950, 1237.5, 1312.5, 1362.5, 1387.5, 1425, 1500, 1575, 1675)
w <- c(1100, 1250, 1350, 1425, 1500, 1575, 1700)

payoff.call <- function(p){
  w <- c(650, 875, 1000, 1125, 1237.5, 1312.5, 1387.5, 1500)
  n <- length(w)
  vector <- rep(NA, n)
  for(i in 1:n){
    
     if( p < w[i]){
       vector[i] <- w[i] - p
     }else{
       vector[i] <- 0
     }
    
  }
  
  return(vector)
  
}

call <- t(sapply(c(1175, 1225, 1250, 1300, 1325, 1375, 1400, 1450, 1475), payoff.call))
call
# function for put option 
payoff.put <- function(k){
  
  w <- c(650, 875, 1000, 1125, 1237.5, 1312.5, 1387.5, 1500)
  n <- length(w)
  index <- rep(NA,n)
  for(j in 1:n){
    
    if(k > w[j]){
      index[j] <- k - w[j]
    
    }else{
      index[j] <- 0
    }
  }
  return(index)
}

payoff.put(1175)

put <- t(sapply(c(900, 995, 1025, 1060, 1075, 1100, 1150, 1175), payoff.put))
put
solve(put, put.mid)

call <- call[,4:6]
solve(call, call.mid)

Q <- c(solve(put, put.mid),solve(call, call.mid) )

Q <- matrix(c(0.206200, 0.083600, 0.091067, 0.038267, 0.032667, 0.117333, 0.207667, 0.105333, 0.105333), ncol =1)

Vmodel <- function(x, Q){
  
  n <- nrow(x)
  vector <- rep(NA, n)
  for(h in 1:n){
    
    vector[h] <- x[h,] %*% Q
    
  }
  
  return(vector)
}


V.put <- Vmodel(put,Q)
V.call <- Vmodel(call, Q)
V.put
V.call
V.market <- c(V.put, V.call)
V.market

put.mid <- c(3.75, 9, 11.85, 16.45, 18.75, 23.7, 36.3, 45.1)
call.mid <- c(69, 41.3, 30.6, 15.6, 10.5, 4.35, 2.85, 1.025, 0.575)

put.call <- c(V.put,V.call)
rm(V.put, V.call)

put.call.mid <- c(put.mid, call.mid)
rm(put.mid, call.mid)
put.call.mid

RMSE <- function(put.call,put.call.mid){
  
  n <- length(put.call)
  yuxiao <- rep(NA, n)
  
  for(i in 1:n){
    
    yuxiao[i] <- (put.call[i] - put.call.mid[i])^2/put.call.mid[i]^2
  }
  
 result <-  sqrt(mean(yuxiao))
 
 return(result)
}
RMSE(put.call, put.call.mid)
put.call.mid

call <- call[1:4, 4:7]
call
s <- matrix(c(71.1,47.25, 15.8, 7.9), ncol =1 )
s
solve(call, s)

exp(1)^(0.04*1/12)

(1.05-1.003338895)/(1.05-0.95)
  
# function for compute the midpoint price
luo <- function(a,b){ 
  
  result <- (a+b)/2
  return(result)
}


put.mid.v <- matrix(put.mid, ncol =1)
solve(put, put.mid.v)
rm(put.mid.v)

call <- call[1:4, 5:8]
m <- matrix(c(53.8, 22.3, 6.8, 1.625), ncol =1)
solve(call, m)
Q <- c(solve(put, l),solve(call, m))
Q <- matrix(Q, ncol = 1)

#### put/call options

Q <- matrix(c(0.0095, 0.0393, 0.0813, 0.2750, 0.2460, 0.1806, 0.09467, 0.02167), ncol =1)


putmid <- put.call.mid[1:9]
callmid <- put.call.mid[10:length(put.call.mid)]


V.market <- c(V.put,V.call)
mean(abs(V.market - put.call.mid) / put.call.mid)

put.mid <- c(1.425, 5.8, 14.75, 54.9)
call.mid <- c(53.8, 22.3, 6.8, 1.625)
put.call.mid <- c(put.mid, call.mid)
put.call.mid
